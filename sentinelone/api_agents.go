/*
S1 MGMT API

SentinelOne Management Console API specification. Changes made to original schema (saved as sentinelone_original.json) - Converted to yaml and intially removed all paths, definitions, and tags - Added security definition APIToken - Added global security APIToken - Added tags Agents, Agent Actions - Added /agents path and required definitions - Added /agents/actions/disconnect and required definitions - Added /agents/actions/connect and required definitions - Added operation id for all paths (for more readable generation) - Removed minimum value attribute if value is of type string (to prevents validation warnings) - Removed firstFullModeTime parameter in GetAgents (breaks generation due to malformed datetime serverside)

API version: 2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sentinelone

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)


// AgentsApiService AgentsApi service
type AgentsApiService service

type ApiGetAgentsRequest struct {
	ctx context.Context
	ApiService *AgentsApiService
	scanStatusesNin *[]string
	query *string
	decommissionedAtGte *time.Time
	awsSecurityGroupsContains *[]string
	threatMitigationStatus *string
	registeredAtLte *time.Time
	updatedAtGt *time.Time
	domains *[]string
	networkQuarantineEnabled *[]bool
	migrationStatus *string
	accountIds *[]string
	ids *[]string
	networkInterfaceInetContains *[]string
	agentVersionsNin *[]string
	cloudProvider *[]string
	sortOrder *string
	osTypesNin *[]string
	installerTypesNin *[]string
	machineTypes *[]string
	encryptedApplications *bool
	isPendingUninstall *bool
	hasLocalConfiguration *bool
	isUpToDate *bool
	isDecommissioned *[]bool
	computerName *string
	lastLoggedInUserNameContains *[]string
	appsVulnerabilityStatuses *[]string
	k8sVersionContains *[]string
	firewallEnabled *[]bool
	decommissionedAtLt *time.Time
	activeThreats *int32
	awsSubnetIdsContains *[]string
	createdAtGte *time.Time
	k8sNodeNameContains *[]string
	totalMemoryGte *int32
	machineTypesNin *[]string
	lastActiveDateBetween *string
	networkInterfaceGatewayMacAddressContains *[]string
	awsRoleContains *[]string
	remoteProfilingStatesNin *[]string
	lastActiveDateLte *time.Time
	createdAtLte *time.Time
	consoleMigrationStatusesNin *[]string
	sortBy *string
	filteredSiteIds *[]string
	adComputerNameContains *[]string
	registeredAtGt *time.Time
	cloudTagsContains *[]string
	adUserQueryContains *[]string
	threatContentHash *string
	scanStatuses *[]string
	operationalStatesNin *[]string
	threatRebootRequired *[]bool
	isActive *bool
	totalMemoryLt *int32
	adComputerQueryContains *[]string
	userActionsNeeded *[]string
	updatedAtBetween *string
	cpuCountGte *int32
	uuids *[]string
	serialNumberContains *[]string
	registeredAtBetween *string
	scanStatus *string
	externalIdContains *[]string
	totalMemoryLte *int32
	countOnly *bool
	locationIds *[]string
	cloudNetworkContains *[]string
	azureResourceGroupContains *[]string
	coreCountBetween *string
	isUninstalled *[]bool
	filterId *string
	cpuIdContains *[]string
	k8sTypeContains *[]string
	cloudProviderNin *[]string
	mitigationMode *string
	cloudAccountContains *[]string
	adComputerMemberContains *[]string
	consoleMigrationStatuses *[]string
	lastActiveDateGt *time.Time
	osArch *string
	agentContentUpdateIdContains *[]string
	registeredAtGte *time.Time
	coreCountGt *int32
	cpuCountLte *int32
	agentPodNameContains *[]string
	limit *int32
	decommissionedAtBetween *string
	threatCreatedAtLt *time.Time
	coreCountGte *int32
	clusterNameContains *[]string
	cpuCountGt *int32
	adQueryContains *[]string
	rangerVersions *[]string
	userActionsNeededNin *[]string
	threatCreatedAtGt *time.Time
	cloudInstanceSizeContains *[]string
	adQuery *string
	externalIpContains *[]string
	locationEnabled *[]bool
	totalMemoryGt *int32
	gatewayIp *string
	registeredAtLt *time.Time
	agentVersions *[]string
	installerTypes *[]string
	coreCountLte *int32
	cursor *string
	totalMemoryBetween *string
	lastActiveDateGte *time.Time
	computerNameContains *[]string
	locationIdsNin *[]string
	threatCreatedAtLte *time.Time
	hasTags *bool
	updatedAtGte *time.Time
	threatResolved *bool
	decommissionedAtGt *time.Time
	threatHidden *bool
	infected *bool
	uuidContains *[]string
	networkStatusesNin *[]string
	cloudImageContains *[]string
	siteIds *[]string
	rangerStatus *string
	domainsNin *[]string
	threatCreatedAtGte *time.Time
	csvFilterId *string
	adUserNameContains *[]string
	appsVulnerabilityStatusesNin *[]string
	uuid *string
	coreCountLt *int32
	skip *int32
	mitigationModeSuspicious *string
	rangerStatusesNin *[]string
	createdAtGt *time.Time
	rangerVersionsNin *[]string
	filteredGroupIds *[]string
	decommissionedAtLte *time.Time
	operationalStates *[]string
	osVersionContains *[]string
	updatedAtLte *time.Time
	updatedAtLt *time.Time
	k8sNodeLabelsContains *[]string
	adUserMemberContains *[]string
	cloudLocationContains *[]string
	networkStatuses *[]string
	remoteProfilingStates *[]string
	networkInterfacePhysicalContains *[]string
	agentNamespaceContains *[]string
	rangerStatuses *[]string
	skipCount *bool
	activeThreatsGt *int32
	lastActiveDateLt *time.Time
	cloudInstanceIdContains *[]string
	createdAtLt *time.Time
	cpuCountBetween *string
	gcpServiceAccountContains *[]string
	threatCreatedAtBetween *string
	osTypes *[]string
	cpuCountLt *int32
	groupIds *[]string
	computerNameLike *string
	tagsData *string
	createdAtBetween *string
}

// Not included scan statuses. Example: \&quot;started,aborted\&quot;.
func (r ApiGetAgentsRequest) ScanStatusesNin(scanStatusesNin []string) ApiGetAgentsRequest {
	r.scanStatusesNin = &scanStatusesNin
	return r
}

// A free-text search term, will match applicable attributes (sub-string match). Note: Device&#39;s physical addresses will be matched if they start with the search term only (no match if they contain the term). Example: \&quot;Linux\&quot;.
func (r ApiGetAgentsRequest) Query(query string) ApiGetAgentsRequest {
	r.query = &query
	return r
}

// Agents decommissioned after or at this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) DecommissionedAtGte(decommissionedAtGte time.Time) ApiGetAgentsRequest {
	r.decommissionedAtGte = &decommissionedAtGte
	return r
}

// Free-text filter by aws securityGroups(supports multiple values)
func (r ApiGetAgentsRequest) AwsSecurityGroupsContains(awsSecurityGroupsContains []string) ApiGetAgentsRequest {
	r.awsSecurityGroupsContains = &awsSecurityGroupsContains
	return r
}

// Include only Agents that have threats with this mitigation status. Example: \&quot;mitigated\&quot;.
func (r ApiGetAgentsRequest) ThreatMitigationStatus(threatMitigationStatus string) ApiGetAgentsRequest {
	r.threatMitigationStatus = &threatMitigationStatus
	return r
}

// Agents registered before or at this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) RegisteredAtLte(registeredAtLte time.Time) ApiGetAgentsRequest {
	r.registeredAtLte = &registeredAtLte
	return r
}

// Agents updated after this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetAgentsRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// Included network domains. Example: \&quot;mybusiness.net,workgroup\&quot;.
func (r ApiGetAgentsRequest) Domains(domains []string) ApiGetAgentsRequest {
	r.domains = &domains
	return r
}

// The agents supports Network Quarantine Control and its enabled for the agent&#39;s group
func (r ApiGetAgentsRequest) NetworkQuarantineEnabled(networkQuarantineEnabled []bool) ApiGetAgentsRequest {
	r.networkQuarantineEnabled = &networkQuarantineEnabled
	return r
}

// Migration status. Example: \&quot;N/A\&quot;.
func (r ApiGetAgentsRequest) MigrationStatus(migrationStatus string) ApiGetAgentsRequest {
	r.migrationStatus = &migrationStatus
	return r
}

// List of Account IDs to filter by. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) AccountIds(accountIds []string) ApiGetAgentsRequest {
	r.accountIds = &accountIds
	return r
}

// A list of Agent IDs. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) Ids(ids []string) ApiGetAgentsRequest {
	r.ids = &ids
	return r
}

// Free-text filter by local IP (supports multiple values). Example: \&quot;192,10.0.0\&quot;.
func (r ApiGetAgentsRequest) NetworkInterfaceInetContains(networkInterfaceInetContains []string) ApiGetAgentsRequest {
	r.networkInterfaceInetContains = &networkInterfaceInetContains
	return r
}

// Agent versions not to include. Example: \&quot;2.0.0.0,2.1.5.144\&quot;.
func (r ApiGetAgentsRequest) AgentVersionsNin(agentVersionsNin []string) ApiGetAgentsRequest {
	r.agentVersionsNin = &agentVersionsNin
	return r
}

// Agents from which cloud provider
func (r ApiGetAgentsRequest) CloudProvider(cloudProvider []string) ApiGetAgentsRequest {
	r.cloudProvider = &cloudProvider
	return r
}

// Sort direction. Example: \&quot;asc\&quot;.
func (r ApiGetAgentsRequest) SortOrder(sortOrder string) ApiGetAgentsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Not included OS types. Example: \&quot;windows\&quot;.
func (r ApiGetAgentsRequest) OsTypesNin(osTypesNin []string) ApiGetAgentsRequest {
	r.osTypesNin = &osTypesNin
	return r
}

// Exclude Agents installed with these package types. Example: \&quot;.msi\&quot;.
func (r ApiGetAgentsRequest) InstallerTypesNin(installerTypesNin []string) ApiGetAgentsRequest {
	r.installerTypesNin = &installerTypesNin
	return r
}

// Included machine types. Example: \&quot;laptop,desktop\&quot;.
func (r ApiGetAgentsRequest) MachineTypes(machineTypes []string) ApiGetAgentsRequest {
	r.machineTypes = &machineTypes
	return r
}

// Disk encryption status
func (r ApiGetAgentsRequest) EncryptedApplications(encryptedApplications bool) ApiGetAgentsRequest {
	r.encryptedApplications = &encryptedApplications
	return r
}

// Include only Agents with pending uninstall requests
func (r ApiGetAgentsRequest) IsPendingUninstall(isPendingUninstall bool) ApiGetAgentsRequest {
	r.isPendingUninstall = &isPendingUninstall
	return r
}

// Agent has a local configuration set
func (r ApiGetAgentsRequest) HasLocalConfiguration(hasLocalConfiguration bool) ApiGetAgentsRequest {
	r.hasLocalConfiguration = &hasLocalConfiguration
	return r
}

// Include only Agents with updated software
func (r ApiGetAgentsRequest) IsUpToDate(isUpToDate bool) ApiGetAgentsRequest {
	r.isUpToDate = &isUpToDate
	return r
}

// Include active, decommissioned or both. Example: \&quot;True,False\&quot;.
func (r ApiGetAgentsRequest) IsDecommissioned(isDecommissioned []bool) ApiGetAgentsRequest {
	r.isDecommissioned = &isDecommissioned
	return r
}

// Computer name. Example: \&quot;My Office Desktop\&quot;.
func (r ApiGetAgentsRequest) ComputerName(computerName string) ApiGetAgentsRequest {
	r.computerName = &computerName
	return r
}

// Free-text filter by username (supports multiple values). Example: \&quot;admin,johnd1\&quot;.
func (r ApiGetAgentsRequest) LastLoggedInUserNameContains(lastLoggedInUserNameContains []string) ApiGetAgentsRequest {
	r.lastLoggedInUserNameContains = &lastLoggedInUserNameContains
	return r
}

// Apps vulnerability status in. Example: \&quot;patch_required\&quot;.
func (r ApiGetAgentsRequest) AppsVulnerabilityStatuses(appsVulnerabilityStatuses []string) ApiGetAgentsRequest {
	r.appsVulnerabilityStatuses = &appsVulnerabilityStatuses
	return r
}

// Free-text filter by K8s version (supports multiple values)
func (r ApiGetAgentsRequest) K8sVersionContains(k8sVersionContains []string) ApiGetAgentsRequest {
	r.k8sVersionContains = &k8sVersionContains
	return r
}

// The agents supports Firewall Control and it is enabled for the agent&#39;s group
func (r ApiGetAgentsRequest) FirewallEnabled(firewallEnabled []bool) ApiGetAgentsRequest {
	r.firewallEnabled = &firewallEnabled
	return r
}

// Agents decommissioned before this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) DecommissionedAtLt(decommissionedAtLt time.Time) ApiGetAgentsRequest {
	r.decommissionedAtLt = &decommissionedAtLt
	return r
}

// Include Agents with this amount of active threats. Example: \&quot;3\&quot;.
func (r ApiGetAgentsRequest) ActiveThreats(activeThreats int32) ApiGetAgentsRequest {
	r.activeThreats = &activeThreats
	return r
}

// Free-text filter by aws subnet ids (supports multiple values)
func (r ApiGetAgentsRequest) AwsSubnetIdsContains(awsSubnetIdsContains []string) ApiGetAgentsRequest {
	r.awsSubnetIdsContains = &awsSubnetIdsContains
	return r
}

// Agents created after or at this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) CreatedAtGte(createdAtGte time.Time) ApiGetAgentsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// Free-text filter by K8s node name (supports multiple values)
func (r ApiGetAgentsRequest) K8sNodeNameContains(k8sNodeNameContains []string) ApiGetAgentsRequest {
	r.k8sNodeNameContains = &k8sNodeNameContains
	return r
}

// Memory size (MB, more than or equal)
func (r ApiGetAgentsRequest) TotalMemoryGte(totalMemoryGte int32) ApiGetAgentsRequest {
	r.totalMemoryGte = &totalMemoryGte
	return r
}

// Not included machine types. Example: \&quot;laptop,desktop\&quot;.
func (r ApiGetAgentsRequest) MachineTypesNin(machineTypesNin []string) ApiGetAgentsRequest {
	r.machineTypesNin = &machineTypesNin
	return r
}

// Date range for last active date(format: &lt;from_timestamp&gt;-&lt;to_timestamp&gt;, inclusive). Example: \&quot;1514978764288-1514978999999\&quot;.
func (r ApiGetAgentsRequest) LastActiveDateBetween(lastActiveDateBetween string) ApiGetAgentsRequest {
	r.lastActiveDateBetween = &lastActiveDateBetween
	return r
}

// Free-text filter by Gateway MAC address (supports multiple values). Example: \&quot;aa:0f,:41:\&quot;.
func (r ApiGetAgentsRequest) NetworkInterfaceGatewayMacAddressContains(networkInterfaceGatewayMacAddressContains []string) ApiGetAgentsRequest {
	r.networkInterfaceGatewayMacAddressContains = &networkInterfaceGatewayMacAddressContains
	return r
}

// Free-text filter by aws role(supports multiple values)
func (r ApiGetAgentsRequest) AwsRoleContains(awsRoleContains []string) ApiGetAgentsRequest {
	r.awsRoleContains = &awsRoleContains
	return r
}

// Do not include these Agent remote profiling states
func (r ApiGetAgentsRequest) RemoteProfilingStatesNin(remoteProfilingStatesNin []string) ApiGetAgentsRequest {
	r.remoteProfilingStatesNin = &remoteProfilingStatesNin
	return r
}

// Agents last active before or at this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) LastActiveDateLte(lastActiveDateLte time.Time) ApiGetAgentsRequest {
	r.lastActiveDateLte = &lastActiveDateLte
	return r
}

// Agents created before or at this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) CreatedAtLte(createdAtLte time.Time) ApiGetAgentsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// Migration status nin. Example: \&quot;N/A\&quot;.
func (r ApiGetAgentsRequest) ConsoleMigrationStatusesNin(consoleMigrationStatusesNin []string) ApiGetAgentsRequest {
	r.consoleMigrationStatusesNin = &consoleMigrationStatusesNin
	return r
}

// The column to sort the results by. Example: \&quot;id\&quot;.
func (r ApiGetAgentsRequest) SortBy(sortBy string) ApiGetAgentsRequest {
	r.sortBy = &sortBy
	return r
}

// List of Site IDs to filter by. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) FilteredSiteIds(filteredSiteIds []string) ApiGetAgentsRequest {
	r.filteredSiteIds = &filteredSiteIds
	return r
}

// Free-text filter by Active Directory computer name string (supports multiple values). Example: \&quot;DC&#x3D;sentinelone\&quot;.
func (r ApiGetAgentsRequest) AdComputerNameContains(adComputerNameContains []string) ApiGetAgentsRequest {
	r.adComputerNameContains = &adComputerNameContains
	return r
}

// Agents registered after this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) RegisteredAtGt(registeredAtGt time.Time) ApiGetAgentsRequest {
	r.registeredAtGt = &registeredAtGt
	return r
}

// Free-text filter by cloud tags (supports multiple values)
func (r ApiGetAgentsRequest) CloudTagsContains(cloudTagsContains []string) ApiGetAgentsRequest {
	r.cloudTagsContains = &cloudTagsContains
	return r
}

// Free-text filter by Active Directory computer name or its groups (supports multiple values). Example: \&quot;DC&#x3D;sentinelone,John\&quot;.
func (r ApiGetAgentsRequest) AdUserQueryContains(adUserQueryContains []string) ApiGetAgentsRequest {
	r.adUserQueryContains = &adUserQueryContains
	return r
}

// Include only Agents that have at least one threat with this content hash. Example: \&quot;cf23df2207d99a74fbe169e3eba035e633b65d94\&quot;.
func (r ApiGetAgentsRequest) ThreatContentHash(threatContentHash string) ApiGetAgentsRequest {
	r.threatContentHash = &threatContentHash
	return r
}

// Included scan statuses. Example: \&quot;started,aborted\&quot;.
func (r ApiGetAgentsRequest) ScanStatuses(scanStatuses []string) ApiGetAgentsRequest {
	r.scanStatuses = &scanStatuses
	return r
}

// Do not include these Agent operational states
func (r ApiGetAgentsRequest) OperationalStatesNin(operationalStatesNin []string) ApiGetAgentsRequest {
	r.operationalStatesNin = &operationalStatesNin
	return r
}

// Has at least one threat with at least one mitigation action pending reboot to succeed
func (r ApiGetAgentsRequest) ThreatRebootRequired(threatRebootRequired []bool) ApiGetAgentsRequest {
	r.threatRebootRequired = &threatRebootRequired
	return r
}

// Include only active Agents
func (r ApiGetAgentsRequest) IsActive(isActive bool) ApiGetAgentsRequest {
	r.isActive = &isActive
	return r
}

// Memory size (MB, less than)
func (r ApiGetAgentsRequest) TotalMemoryLt(totalMemoryLt int32) ApiGetAgentsRequest {
	r.totalMemoryLt = &totalMemoryLt
	return r
}

// Free-text filter by Active Directory computer name or its groups (supports multiple values). Example: \&quot;DC&#x3D;sentinelone,Windows\&quot;.
func (r ApiGetAgentsRequest) AdComputerQueryContains(adComputerQueryContains []string) ApiGetAgentsRequest {
	r.adComputerQueryContains = &adComputerQueryContains
	return r
}

// Included pending user actions. Example: \&quot;reboot_needed,upgrade_needed\&quot;.
func (r ApiGetAgentsRequest) UserActionsNeeded(userActionsNeeded []string) ApiGetAgentsRequest {
	r.userActionsNeeded = &userActionsNeeded
	return r
}

// Date range for update time (format: &lt;from_timestamp&gt;-&lt;to_timestamp&gt;, inclusive). Example: \&quot;1514978890136-1514978650130\&quot;.
func (r ApiGetAgentsRequest) UpdatedAtBetween(updatedAtBetween string) ApiGetAgentsRequest {
	r.updatedAtBetween = &updatedAtBetween
	return r
}

// Number of CPUs (more than or equal)
func (r ApiGetAgentsRequest) CpuCountGte(cpuCountGte int32) ApiGetAgentsRequest {
	r.cpuCountGte = &cpuCountGte
	return r
}

// A list of included UUIDs. Example: \&quot;ff819e70af13be381993075eb0ce5f2f6de05b11,ff819e70af13be381993075eb0ce5f2f6de05c22\&quot;.
func (r ApiGetAgentsRequest) Uuids(uuids []string) ApiGetAgentsRequest {
	r.uuids = &uuids
	return r
}

// Free-text filter by Serial Number (supports multiple values)
func (r ApiGetAgentsRequest) SerialNumberContains(serialNumberContains []string) ApiGetAgentsRequest {
	r.serialNumberContains = &serialNumberContains
	return r
}

// Date range for first registration time (format: &lt;from_timestamp&gt;-&lt;to_timestamp&gt;, inclusive). Example: \&quot;1514978764288-1514978999999\&quot;.
func (r ApiGetAgentsRequest) RegisteredAtBetween(registeredAtBetween string) ApiGetAgentsRequest {
	r.registeredAtBetween = &registeredAtBetween
	return r
}

// Scan status. Example: \&quot;none\&quot;.
func (r ApiGetAgentsRequest) ScanStatus(scanStatus string) ApiGetAgentsRequest {
	r.scanStatus = &scanStatus
	return r
}

// Free-text filter by external ID (Customer ID). Example: \&quot;Tag#1 - monitoring,Performance machine\&quot;.
func (r ApiGetAgentsRequest) ExternalIdContains(externalIdContains []string) ApiGetAgentsRequest {
	r.externalIdContains = &externalIdContains
	return r
}

// Memory size (MB, less than or equal)
func (r ApiGetAgentsRequest) TotalMemoryLte(totalMemoryLte int32) ApiGetAgentsRequest {
	r.totalMemoryLte = &totalMemoryLte
	return r
}

// If true, only total number of items will be returned, without any of the actual objects.
func (r ApiGetAgentsRequest) CountOnly(countOnly bool) ApiGetAgentsRequest {
	r.countOnly = &countOnly
	return r
}

// Include only Agents reporting these locations. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) LocationIds(locationIds []string) ApiGetAgentsRequest {
	r.locationIds = &locationIds
	return r
}

// Free-text filter by cloud network (supports multiple values)
func (r ApiGetAgentsRequest) CloudNetworkContains(cloudNetworkContains []string) ApiGetAgentsRequest {
	r.cloudNetworkContains = &cloudNetworkContains
	return r
}

// Free-text filter by azure resource group(supports multiple values)
func (r ApiGetAgentsRequest) AzureResourceGroupContains(azureResourceGroupContains []string) ApiGetAgentsRequest {
	r.azureResourceGroupContains = &azureResourceGroupContains
	return r
}

// Possible number of CPU cores (inclusive). Example: \&quot;2-8\&quot;.
func (r ApiGetAgentsRequest) CoreCountBetween(coreCountBetween string) ApiGetAgentsRequest {
	r.coreCountBetween = &coreCountBetween
	return r
}

// Include installed, uninstalled or both. Example: \&quot;True,False\&quot;.
func (r ApiGetAgentsRequest) IsUninstalled(isUninstalled []bool) ApiGetAgentsRequest {
	r.isUninstalled = &isUninstalled
	return r
}

// Include all Agents matching this saved filter. Example: \&quot;225494730938493804\&quot;.
func (r ApiGetAgentsRequest) FilterId(filterId string) ApiGetAgentsRequest {
	r.filterId = &filterId
	return r
}

// Free-text filter by CPU name (supports multiple values). Example: \&quot;Intel,AMD\&quot;.
func (r ApiGetAgentsRequest) CpuIdContains(cpuIdContains []string) ApiGetAgentsRequest {
	r.cpuIdContains = &cpuIdContains
	return r
}

// Free-text filter by K8s type(supports multiple values)
func (r ApiGetAgentsRequest) K8sTypeContains(k8sTypeContains []string) ApiGetAgentsRequest {
	r.k8sTypeContains = &k8sTypeContains
	return r
}

// Exclude Agents from these cloud provider
func (r ApiGetAgentsRequest) CloudProviderNin(cloudProviderNin []string) ApiGetAgentsRequest {
	r.cloudProviderNin = &cloudProviderNin
	return r
}

// Agent mitigation mode policy. Example: \&quot;detect\&quot;.
func (r ApiGetAgentsRequest) MitigationMode(mitigationMode string) ApiGetAgentsRequest {
	r.mitigationMode = &mitigationMode
	return r
}

// Free-text filter by cloud account (supports multiple values)
func (r ApiGetAgentsRequest) CloudAccountContains(cloudAccountContains []string) ApiGetAgentsRequest {
	r.cloudAccountContains = &cloudAccountContains
	return r
}

// Free-text filter by Active Directory computer groups string (supports multiple values). Example: \&quot;DC&#x3D;sentinelone\&quot;.
func (r ApiGetAgentsRequest) AdComputerMemberContains(adComputerMemberContains []string) ApiGetAgentsRequest {
	r.adComputerMemberContains = &adComputerMemberContains
	return r
}

// Migration status in. Example: \&quot;N/A\&quot;.
func (r ApiGetAgentsRequest) ConsoleMigrationStatuses(consoleMigrationStatuses []string) ApiGetAgentsRequest {
	r.consoleMigrationStatuses = &consoleMigrationStatuses
	return r
}

// Agents last active after this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) LastActiveDateGt(lastActiveDateGt time.Time) ApiGetAgentsRequest {
	r.lastActiveDateGt = &lastActiveDateGt
	return r
}

// OS architecture. Example: \&quot;32 bit\&quot;.
func (r ApiGetAgentsRequest) OsArch(osArch string) ApiGetAgentsRequest {
	r.osArch = &osArch
	return r
}

// Free-text filter by content update ID (supports multiple values)
func (r ApiGetAgentsRequest) AgentContentUpdateIdContains(agentContentUpdateIdContains []string) ApiGetAgentsRequest {
	r.agentContentUpdateIdContains = &agentContentUpdateIdContains
	return r
}

// Agents registered after or at this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) RegisteredAtGte(registeredAtGte time.Time) ApiGetAgentsRequest {
	r.registeredAtGte = &registeredAtGte
	return r
}

// CPU cores (more than)
func (r ApiGetAgentsRequest) CoreCountGt(coreCountGt int32) ApiGetAgentsRequest {
	r.coreCountGt = &coreCountGt
	return r
}

// Number of CPUs (less than or equal)
func (r ApiGetAgentsRequest) CpuCountLte(cpuCountLte int32) ApiGetAgentsRequest {
	r.cpuCountLte = &cpuCountLte
	return r
}

// Free-text filter by agent pod name (supports multiple values)
func (r ApiGetAgentsRequest) AgentPodNameContains(agentPodNameContains []string) ApiGetAgentsRequest {
	r.agentPodNameContains = &agentPodNameContains
	return r
}

// Limit number of returned items (1-1000). Example: \&quot;10\&quot;.
func (r ApiGetAgentsRequest) Limit(limit int32) ApiGetAgentsRequest {
	r.limit = &limit
	return r
}

// Date range for decommission time (format: &lt;from_timestamp&gt;-&lt;to_timestamp&gt;, inclusive). Example: \&quot;1514978890136-1514978650130\&quot;.
func (r ApiGetAgentsRequest) DecommissionedAtBetween(decommissionedAtBetween string) ApiGetAgentsRequest {
	r.decommissionedAtBetween = &decommissionedAtBetween
	return r
}

// Agents with threats reported before this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) ThreatCreatedAtLt(threatCreatedAtLt time.Time) ApiGetAgentsRequest {
	r.threatCreatedAtLt = &threatCreatedAtLt
	return r
}

// CPU cores (more than or equal)
func (r ApiGetAgentsRequest) CoreCountGte(coreCountGte int32) ApiGetAgentsRequest {
	r.coreCountGte = &coreCountGte
	return r
}

// Free-text filter by cluster name (supports multiple values)
func (r ApiGetAgentsRequest) ClusterNameContains(clusterNameContains []string) ApiGetAgentsRequest {
	r.clusterNameContains = &clusterNameContains
	return r
}

// Number of CPUs (more than)
func (r ApiGetAgentsRequest) CpuCountGt(cpuCountGt int32) ApiGetAgentsRequest {
	r.cpuCountGt = &cpuCountGt
	return r
}

// Free-text filter by Active Directory string (supports multiple values). Example: \&quot;DC&#x3D;sentinelone\&quot;.
func (r ApiGetAgentsRequest) AdQueryContains(adQueryContains []string) ApiGetAgentsRequest {
	r.adQueryContains = &adQueryContains
	return r
}

// Ranger versions to include. Example: \&quot;2.0.0.0,2.1.5.144\&quot;.
func (r ApiGetAgentsRequest) RangerVersions(rangerVersions []string) ApiGetAgentsRequest {
	r.rangerVersions = &rangerVersions
	return r
}

// Excluded pending user actions. Example: \&quot;reboot_needed,upgrade_needed\&quot;.
func (r ApiGetAgentsRequest) UserActionsNeededNin(userActionsNeededNin []string) ApiGetAgentsRequest {
	r.userActionsNeededNin = &userActionsNeededNin
	return r
}

// Agents with threats reported after this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) ThreatCreatedAtGt(threatCreatedAtGt time.Time) ApiGetAgentsRequest {
	r.threatCreatedAtGt = &threatCreatedAtGt
	return r
}

// Free-text filter by cloud instance size(supports multiple values)
func (r ApiGetAgentsRequest) CloudInstanceSizeContains(cloudInstanceSizeContains []string) ApiGetAgentsRequest {
	r.cloudInstanceSizeContains = &cloudInstanceSizeContains
	return r
}

// An Active Directory query string. Example: \&quot;CN&#x3D;Managers,DC&#x3D;sentinelone,DC&#x3D;com\&quot;.
func (r ApiGetAgentsRequest) AdQuery(adQuery string) ApiGetAgentsRequest {
	r.adQuery = &adQuery
	return r
}

// Free-text filter by visible IP (supports multiple values). Example: \&quot;205,127.0\&quot;.
func (r ApiGetAgentsRequest) ExternalIpContains(externalIpContains []string) ApiGetAgentsRequest {
	r.externalIpContains = &externalIpContains
	return r
}

// The agents supports Location Awareness and it is enabled for the agent&#39;s group
func (r ApiGetAgentsRequest) LocationEnabled(locationEnabled []bool) ApiGetAgentsRequest {
	r.locationEnabled = &locationEnabled
	return r
}

// Memory size (MB, more than)
func (r ApiGetAgentsRequest) TotalMemoryGt(totalMemoryGt int32) ApiGetAgentsRequest {
	r.totalMemoryGt = &totalMemoryGt
	return r
}

// Gateway ip. Example: \&quot;192.168.0.1\&quot;.
func (r ApiGetAgentsRequest) GatewayIp(gatewayIp string) ApiGetAgentsRequest {
	r.gatewayIp = &gatewayIp
	return r
}

// Agents registered before this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) RegisteredAtLt(registeredAtLt time.Time) ApiGetAgentsRequest {
	r.registeredAtLt = &registeredAtLt
	return r
}

// Agent versions to include. Example: \&quot;2.0.0.0,2.1.5.144\&quot;.
func (r ApiGetAgentsRequest) AgentVersions(agentVersions []string) ApiGetAgentsRequest {
	r.agentVersions = &agentVersions
	return r
}

// Include only Agents installed with these package types. Example: \&quot;.msi\&quot;.
func (r ApiGetAgentsRequest) InstallerTypes(installerTypes []string) ApiGetAgentsRequest {
	r.installerTypes = &installerTypes
	return r
}

// CPU cores (less than or equal)
func (r ApiGetAgentsRequest) CoreCountLte(coreCountLte int32) ApiGetAgentsRequest {
	r.coreCountLte = &coreCountLte
	return r
}

// Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \&quot;YWdlbnRfaWQ6NTgwMjkzODE&#x3D;\&quot;.
func (r ApiGetAgentsRequest) Cursor(cursor string) ApiGetAgentsRequest {
	r.cursor = &cursor
	return r
}

// Total memory range (GB, inclusive). Example: \&quot;4-8\&quot;.
func (r ApiGetAgentsRequest) TotalMemoryBetween(totalMemoryBetween string) ApiGetAgentsRequest {
	r.totalMemoryBetween = &totalMemoryBetween
	return r
}

// Agents last active after or at this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) LastActiveDateGte(lastActiveDateGte time.Time) ApiGetAgentsRequest {
	r.lastActiveDateGte = &lastActiveDateGte
	return r
}

// Free-text filter by computer name (supports multiple values). Example: \&quot;john-office,WIN\&quot;.
func (r ApiGetAgentsRequest) ComputerNameContains(computerNameContains []string) ApiGetAgentsRequest {
	r.computerNameContains = &computerNameContains
	return r
}

// Do not include only Agents reporting these locations. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) LocationIdsNin(locationIdsNin []string) ApiGetAgentsRequest {
	r.locationIdsNin = &locationIdsNin
	return r
}

// Agents with threats reported before or at this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) ThreatCreatedAtLte(threatCreatedAtLte time.Time) ApiGetAgentsRequest {
	r.threatCreatedAtLte = &threatCreatedAtLte
	return r
}

// Include only Agents that have tags
func (r ApiGetAgentsRequest) HasTags(hasTags bool) ApiGetAgentsRequest {
	r.hasTags = &hasTags
	return r
}

// Agents updated after or at this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetAgentsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// Include only Agents with at least one resolved threat
func (r ApiGetAgentsRequest) ThreatResolved(threatResolved bool) ApiGetAgentsRequest {
	r.threatResolved = &threatResolved
	return r
}

// Agents decommissioned after this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) DecommissionedAtGt(decommissionedAtGt time.Time) ApiGetAgentsRequest {
	r.decommissionedAtGt = &decommissionedAtGt
	return r
}

// Include only Agents with at least one hidden threat
func (r ApiGetAgentsRequest) ThreatHidden(threatHidden bool) ApiGetAgentsRequest {
	r.threatHidden = &threatHidden
	return r
}

// Include only Agents with at least one active threat
func (r ApiGetAgentsRequest) Infected(infected bool) ApiGetAgentsRequest {
	r.infected = &infected
	return r
}

// Free-text filter by Agent UUID (supports multiple values). Example: \&quot;e92-01928,b055\&quot;.
func (r ApiGetAgentsRequest) UuidContains(uuidContains []string) ApiGetAgentsRequest {
	r.uuidContains = &uuidContains
	return r
}

// Included network statuses. Example: \&quot;connected,connecting\&quot;.
func (r ApiGetAgentsRequest) NetworkStatusesNin(networkStatusesNin []string) ApiGetAgentsRequest {
	r.networkStatusesNin = &networkStatusesNin
	return r
}

// Free-text filter by cloud image (supports multiple values)
func (r ApiGetAgentsRequest) CloudImageContains(cloudImageContains []string) ApiGetAgentsRequest {
	r.cloudImageContains = &cloudImageContains
	return r
}

// List of Site IDs to filter by. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) SiteIds(siteIds []string) ApiGetAgentsRequest {
	r.siteIds = &siteIds
	return r
}

// [DEPRECATED] Use rangerStatuses. Example: \&quot;NotApplicable\&quot;.
func (r ApiGetAgentsRequest) RangerStatus(rangerStatus string) ApiGetAgentsRequest {
	r.rangerStatus = &rangerStatus
	return r
}

// Not included network domains. Example: \&quot;mybusiness.net,workgroup\&quot;.
func (r ApiGetAgentsRequest) DomainsNin(domainsNin []string) ApiGetAgentsRequest {
	r.domainsNin = &domainsNin
	return r
}

// Agents with threats reported after or at this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) ThreatCreatedAtGte(threatCreatedAtGte time.Time) ApiGetAgentsRequest {
	r.threatCreatedAtGte = &threatCreatedAtGte
	return r
}

// The ID of the CSV file to filter by. Example: \&quot;225494730938493804\&quot;.
func (r ApiGetAgentsRequest) CsvFilterId(csvFilterId string) ApiGetAgentsRequest {
	r.csvFilterId = &csvFilterId
	return r
}

// Free-text filter by Active Directory username string (supports multiple values). Example: \&quot;DC&#x3D;sentinelone\&quot;.
func (r ApiGetAgentsRequest) AdUserNameContains(adUserNameContains []string) ApiGetAgentsRequest {
	r.adUserNameContains = &adUserNameContains
	return r
}

// Apps vulnerability status nin. Example: \&quot;patch_required\&quot;.
func (r ApiGetAgentsRequest) AppsVulnerabilityStatusesNin(appsVulnerabilityStatusesNin []string) ApiGetAgentsRequest {
	r.appsVulnerabilityStatusesNin = &appsVulnerabilityStatusesNin
	return r
}

// Agent&#39;s universally unique identifier. Example: \&quot;ff819e70af13be381993075eb0ce5f2f6de05be2\&quot;.
func (r ApiGetAgentsRequest) Uuid(uuid string) ApiGetAgentsRequest {
	r.uuid = &uuid
	return r
}

// CPU cores (less than)
func (r ApiGetAgentsRequest) CoreCountLt(coreCountLt int32) ApiGetAgentsRequest {
	r.coreCountLt = &coreCountLt
	return r
}

// Skip first number of items (0-1000). To iterate over more than 1000 items,  use \&quot;cursor\&quot;. Example: \&quot;150\&quot;.
func (r ApiGetAgentsRequest) Skip(skip int32) ApiGetAgentsRequest {
	r.skip = &skip
	return r
}

// Mitigation mode policy for suspicious activity. Example: \&quot;detect\&quot;.
func (r ApiGetAgentsRequest) MitigationModeSuspicious(mitigationModeSuspicious string) ApiGetAgentsRequest {
	r.mitigationModeSuspicious = &mitigationModeSuspicious
	return r
}

// Do not include these Ranger Statuses. Example: \&quot;NotApplicable\&quot;.
func (r ApiGetAgentsRequest) RangerStatusesNin(rangerStatusesNin []string) ApiGetAgentsRequest {
	r.rangerStatusesNin = &rangerStatusesNin
	return r
}

// Agents created after this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) CreatedAtGt(createdAtGt time.Time) ApiGetAgentsRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// Ranger versions not to include. Example: \&quot;2.0.0.0,2.1.5.144\&quot;.
func (r ApiGetAgentsRequest) RangerVersionsNin(rangerVersionsNin []string) ApiGetAgentsRequest {
	r.rangerVersionsNin = &rangerVersionsNin
	return r
}

// List of Group IDs to filter by. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) FilteredGroupIds(filteredGroupIds []string) ApiGetAgentsRequest {
	r.filteredGroupIds = &filteredGroupIds
	return r
}

// Agents decommissioned before this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) DecommissionedAtLte(decommissionedAtLte time.Time) ApiGetAgentsRequest {
	r.decommissionedAtLte = &decommissionedAtLte
	return r
}

// Agent operational state
func (r ApiGetAgentsRequest) OperationalStates(operationalStates []string) ApiGetAgentsRequest {
	r.operationalStates = &operationalStates
	return r
}

// Free-text filter by OS full name and version (supports multiple values). Example: \&quot;Service Pack 1\&quot;.
func (r ApiGetAgentsRequest) OsVersionContains(osVersionContains []string) ApiGetAgentsRequest {
	r.osVersionContains = &osVersionContains
	return r
}

// Agents updated before or at this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetAgentsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// Agents updated before this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetAgentsRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// Free-text filter by K8s node labels (supports multiple values)
func (r ApiGetAgentsRequest) K8sNodeLabelsContains(k8sNodeLabelsContains []string) ApiGetAgentsRequest {
	r.k8sNodeLabelsContains = &k8sNodeLabelsContains
	return r
}

// Free-text filter by Active Directory user groups string (supports multiple values). Example: \&quot;DC&#x3D;sentinelone\&quot;.
func (r ApiGetAgentsRequest) AdUserMemberContains(adUserMemberContains []string) ApiGetAgentsRequest {
	r.adUserMemberContains = &adUserMemberContains
	return r
}

// Free-text filter by cloud location (supports multiple values)
func (r ApiGetAgentsRequest) CloudLocationContains(cloudLocationContains []string) ApiGetAgentsRequest {
	r.cloudLocationContains = &cloudLocationContains
	return r
}

// Included network statuses. Example: \&quot;connected,connecting\&quot;.
func (r ApiGetAgentsRequest) NetworkStatuses(networkStatuses []string) ApiGetAgentsRequest {
	r.networkStatuses = &networkStatuses
	return r
}

// Agent remote profiling state
func (r ApiGetAgentsRequest) RemoteProfilingStates(remoteProfilingStates []string) ApiGetAgentsRequest {
	r.remoteProfilingStates = &remoteProfilingStates
	return r
}

// Free-text filter by MAC address (supports multiple values). Example: \&quot;aa:0f,:41:\&quot;.
func (r ApiGetAgentsRequest) NetworkInterfacePhysicalContains(networkInterfacePhysicalContains []string) ApiGetAgentsRequest {
	r.networkInterfacePhysicalContains = &networkInterfacePhysicalContains
	return r
}

// Free-text filter by agent namespace (supports multiple values)
func (r ApiGetAgentsRequest) AgentNamespaceContains(agentNamespaceContains []string) ApiGetAgentsRequest {
	r.agentNamespaceContains = &agentNamespaceContains
	return r
}

// Status of Ranger. Example: \&quot;NotApplicable\&quot;.
func (r ApiGetAgentsRequest) RangerStatuses(rangerStatuses []string) ApiGetAgentsRequest {
	r.rangerStatuses = &rangerStatuses
	return r
}

// If true, total number of items will not be calculated, which speeds up execution time.
func (r ApiGetAgentsRequest) SkipCount(skipCount bool) ApiGetAgentsRequest {
	r.skipCount = &skipCount
	return r
}

// Include Agents with at least this amount of active threats. Example: \&quot;5\&quot;.
func (r ApiGetAgentsRequest) ActiveThreatsGt(activeThreatsGt int32) ApiGetAgentsRequest {
	r.activeThreatsGt = &activeThreatsGt
	return r
}

// Agents last active before this time. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) LastActiveDateLt(lastActiveDateLt time.Time) ApiGetAgentsRequest {
	r.lastActiveDateLt = &lastActiveDateLt
	return r
}

// Free-text filter by cloud instance id(supports multiple values)
func (r ApiGetAgentsRequest) CloudInstanceIdContains(cloudInstanceIdContains []string) ApiGetAgentsRequest {
	r.cloudInstanceIdContains = &cloudInstanceIdContains
	return r
}

// Agents created before this timestamp. Example: \&quot;2018-02-27T04:49:26.257525Z\&quot;.
func (r ApiGetAgentsRequest) CreatedAtLt(createdAtLt time.Time) ApiGetAgentsRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// Possible number of CPU cores (inclusive). Example: \&quot;2-8\&quot;.
func (r ApiGetAgentsRequest) CpuCountBetween(cpuCountBetween string) ApiGetAgentsRequest {
	r.cpuCountBetween = &cpuCountBetween
	return r
}

// Free-text filter by gcp service account (supports multiple values)
func (r ApiGetAgentsRequest) GcpServiceAccountContains(gcpServiceAccountContains []string) ApiGetAgentsRequest {
	r.gcpServiceAccountContains = &gcpServiceAccountContains
	return r
}

// Agents with threats reported in a date range (format: &lt;from_timestamp&gt;-&lt;to_timestamp&gt;, inclusive). Example: \&quot;1514978764288-1514978999999\&quot;.
func (r ApiGetAgentsRequest) ThreatCreatedAtBetween(threatCreatedAtBetween string) ApiGetAgentsRequest {
	r.threatCreatedAtBetween = &threatCreatedAtBetween
	return r
}

// Included OS types. Example: \&quot;windows\&quot;.
func (r ApiGetAgentsRequest) OsTypes(osTypes []string) ApiGetAgentsRequest {
	r.osTypes = &osTypes
	return r
}

// Number of CPUs (less than)
func (r ApiGetAgentsRequest) CpuCountLt(cpuCountLt int32) ApiGetAgentsRequest {
	r.cpuCountLt = &cpuCountLt
	return r
}

// List of Group IDs to filter by. Example: \&quot;225494730938493804,225494730938493915\&quot;.
func (r ApiGetAgentsRequest) GroupIds(groupIds []string) ApiGetAgentsRequest {
	r.groupIds = &groupIds
	return r
}

// Match computer name partially (substring). Example: \&quot;Lab1\&quot;.
func (r ApiGetAgentsRequest) ComputerNameLike(computerNameLike string) ApiGetAgentsRequest {
	r.computerNameLike = &computerNameLike
	return r
}

// A JSON formatted string, where each key represents a tag key, and each value represents a list of string values. Example: \&quot;{\&quot;key1\&quot;: [\&quot;value1_1\&quot;, \&quot;value1_2\&quot;], \&quot;key2\&quot;: [\&quot;value2\&quot;]}\&quot;.
func (r ApiGetAgentsRequest) TagsData(tagsData string) ApiGetAgentsRequest {
	r.tagsData = &tagsData
	return r
}

// Date range for creation time (format: &lt;from_timestamp&gt;-&lt;to_timestamp&gt;, inclusive). Example: \&quot;1514978890136-1514978650130\&quot;.
func (r ApiGetAgentsRequest) CreatedAtBetween(createdAtBetween string) ApiGetAgentsRequest {
	r.createdAtBetween = &createdAtBetween
	return r
}

func (r ApiGetAgentsRequest) Execute() (*AgentsSchemasAgentViewSchemaMany200, *http.Response, error) {
	return r.ApiService.GetAgentsExecute(r)
}

/*
GetAgents Get Agents

Get the Agents, and their data, that match the filter. This command gives the Agent ID, which you can use in other commands. To save the list and data to a CSV file, use "export/agents".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAgentsRequest
*/
func (a *AgentsApiService) GetAgents(ctx context.Context) ApiGetAgentsRequest {
	return ApiGetAgentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AgentsSchemasAgentViewSchemaMany200
func (a *AgentsApiService) GetAgentsExecute(r ApiGetAgentsRequest) (*AgentsSchemasAgentViewSchemaMany200, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgentsSchemasAgentViewSchemaMany200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsApiService.GetAgents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/web/api/v2.1/agents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scanStatusesNin != nil {
		localVarQueryParams.Add("scanStatusesNin", parameterToString(*r.scanStatusesNin, "csv"))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.decommissionedAtGte != nil {
		localVarQueryParams.Add("decommissionedAt__gte", parameterToString(*r.decommissionedAtGte, ""))
	}
	if r.awsSecurityGroupsContains != nil {
		localVarQueryParams.Add("awsSecurityGroups__contains", parameterToString(*r.awsSecurityGroupsContains, "csv"))
	}
	if r.threatMitigationStatus != nil {
		localVarQueryParams.Add("threatMitigationStatus", parameterToString(*r.threatMitigationStatus, ""))
	}
	if r.registeredAtLte != nil {
		localVarQueryParams.Add("registeredAt__lte", parameterToString(*r.registeredAtLte, ""))
	}
	if r.updatedAtGt != nil {
		localVarQueryParams.Add("updatedAt__gt", parameterToString(*r.updatedAtGt, ""))
	}
	if r.domains != nil {
		localVarQueryParams.Add("domains", parameterToString(*r.domains, "csv"))
	}
	if r.networkQuarantineEnabled != nil {
		localVarQueryParams.Add("networkQuarantineEnabled", parameterToString(*r.networkQuarantineEnabled, "csv"))
	}
	if r.migrationStatus != nil {
		localVarQueryParams.Add("migrationStatus", parameterToString(*r.migrationStatus, ""))
	}
	if r.accountIds != nil {
		localVarQueryParams.Add("accountIds", parameterToString(*r.accountIds, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.networkInterfaceInetContains != nil {
		localVarQueryParams.Add("networkInterfaceInet__contains", parameterToString(*r.networkInterfaceInetContains, "csv"))
	}
	if r.agentVersionsNin != nil {
		localVarQueryParams.Add("agentVersionsNin", parameterToString(*r.agentVersionsNin, "csv"))
	}
	if r.cloudProvider != nil {
		localVarQueryParams.Add("cloudProvider", parameterToString(*r.cloudProvider, "csv"))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.osTypesNin != nil {
		localVarQueryParams.Add("osTypesNin", parameterToString(*r.osTypesNin, "csv"))
	}
	if r.installerTypesNin != nil {
		localVarQueryParams.Add("installerTypesNin", parameterToString(*r.installerTypesNin, "csv"))
	}
	if r.machineTypes != nil {
		localVarQueryParams.Add("machineTypes", parameterToString(*r.machineTypes, "csv"))
	}
	if r.encryptedApplications != nil {
		localVarQueryParams.Add("encryptedApplications", parameterToString(*r.encryptedApplications, ""))
	}
	if r.isPendingUninstall != nil {
		localVarQueryParams.Add("isPendingUninstall", parameterToString(*r.isPendingUninstall, ""))
	}
	if r.hasLocalConfiguration != nil {
		localVarQueryParams.Add("hasLocalConfiguration", parameterToString(*r.hasLocalConfiguration, ""))
	}
	if r.isUpToDate != nil {
		localVarQueryParams.Add("isUpToDate", parameterToString(*r.isUpToDate, ""))
	}
	if r.isDecommissioned != nil {
		localVarQueryParams.Add("isDecommissioned", parameterToString(*r.isDecommissioned, "csv"))
	}
	if r.computerName != nil {
		localVarQueryParams.Add("computerName", parameterToString(*r.computerName, ""))
	}
	if r.lastLoggedInUserNameContains != nil {
		localVarQueryParams.Add("lastLoggedInUserName__contains", parameterToString(*r.lastLoggedInUserNameContains, "csv"))
	}
	if r.appsVulnerabilityStatuses != nil {
		localVarQueryParams.Add("appsVulnerabilityStatuses", parameterToString(*r.appsVulnerabilityStatuses, "csv"))
	}
	if r.k8sVersionContains != nil {
		localVarQueryParams.Add("k8sVersion__contains", parameterToString(*r.k8sVersionContains, "csv"))
	}
	if r.firewallEnabled != nil {
		localVarQueryParams.Add("firewallEnabled", parameterToString(*r.firewallEnabled, "csv"))
	}
	if r.decommissionedAtLt != nil {
		localVarQueryParams.Add("decommissionedAt__lt", parameterToString(*r.decommissionedAtLt, ""))
	}
	if r.activeThreats != nil {
		localVarQueryParams.Add("activeThreats", parameterToString(*r.activeThreats, ""))
	}
	if r.awsSubnetIdsContains != nil {
		localVarQueryParams.Add("awsSubnetIds__contains", parameterToString(*r.awsSubnetIdsContains, "csv"))
	}
	if r.createdAtGte != nil {
		localVarQueryParams.Add("createdAt__gte", parameterToString(*r.createdAtGte, ""))
	}
	if r.k8sNodeNameContains != nil {
		localVarQueryParams.Add("k8sNodeName__contains", parameterToString(*r.k8sNodeNameContains, "csv"))
	}
	if r.totalMemoryGte != nil {
		localVarQueryParams.Add("totalMemory__gte", parameterToString(*r.totalMemoryGte, ""))
	}
	if r.machineTypesNin != nil {
		localVarQueryParams.Add("machineTypesNin", parameterToString(*r.machineTypesNin, "csv"))
	}
	if r.lastActiveDateBetween != nil {
		localVarQueryParams.Add("lastActiveDate__between", parameterToString(*r.lastActiveDateBetween, ""))
	}
	if r.networkInterfaceGatewayMacAddressContains != nil {
		localVarQueryParams.Add("networkInterfaceGatewayMacAddress__contains", parameterToString(*r.networkInterfaceGatewayMacAddressContains, "csv"))
	}
	if r.awsRoleContains != nil {
		localVarQueryParams.Add("awsRole__contains", parameterToString(*r.awsRoleContains, "csv"))
	}
	if r.remoteProfilingStatesNin != nil {
		localVarQueryParams.Add("remoteProfilingStatesNin", parameterToString(*r.remoteProfilingStatesNin, "csv"))
	}
	if r.lastActiveDateLte != nil {
		localVarQueryParams.Add("lastActiveDate__lte", parameterToString(*r.lastActiveDateLte, ""))
	}
	if r.createdAtLte != nil {
		localVarQueryParams.Add("createdAt__lte", parameterToString(*r.createdAtLte, ""))
	}
	if r.consoleMigrationStatusesNin != nil {
		localVarQueryParams.Add("consoleMigrationStatusesNin", parameterToString(*r.consoleMigrationStatusesNin, "csv"))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.filteredSiteIds != nil {
		localVarQueryParams.Add("filteredSiteIds", parameterToString(*r.filteredSiteIds, "csv"))
	}
	if r.adComputerNameContains != nil {
		localVarQueryParams.Add("adComputerName__contains", parameterToString(*r.adComputerNameContains, "csv"))
	}
	if r.registeredAtGt != nil {
		localVarQueryParams.Add("registeredAt__gt", parameterToString(*r.registeredAtGt, ""))
	}
	if r.cloudTagsContains != nil {
		localVarQueryParams.Add("cloudTags__contains", parameterToString(*r.cloudTagsContains, "csv"))
	}
	if r.adUserQueryContains != nil {
		localVarQueryParams.Add("adUserQuery__contains", parameterToString(*r.adUserQueryContains, "csv"))
	}
	if r.threatContentHash != nil {
		localVarQueryParams.Add("threatContentHash", parameterToString(*r.threatContentHash, ""))
	}
	if r.scanStatuses != nil {
		localVarQueryParams.Add("scanStatuses", parameterToString(*r.scanStatuses, "csv"))
	}
	if r.operationalStatesNin != nil {
		localVarQueryParams.Add("operationalStatesNin", parameterToString(*r.operationalStatesNin, "csv"))
	}
	if r.threatRebootRequired != nil {
		localVarQueryParams.Add("threatRebootRequired", parameterToString(*r.threatRebootRequired, "csv"))
	}
	if r.isActive != nil {
		localVarQueryParams.Add("isActive", parameterToString(*r.isActive, ""))
	}
	if r.totalMemoryLt != nil {
		localVarQueryParams.Add("totalMemory__lt", parameterToString(*r.totalMemoryLt, ""))
	}
	if r.adComputerQueryContains != nil {
		localVarQueryParams.Add("adComputerQuery__contains", parameterToString(*r.adComputerQueryContains, "csv"))
	}
	if r.userActionsNeeded != nil {
		localVarQueryParams.Add("userActionsNeeded", parameterToString(*r.userActionsNeeded, "csv"))
	}
	if r.updatedAtBetween != nil {
		localVarQueryParams.Add("updatedAt__between", parameterToString(*r.updatedAtBetween, ""))
	}
	if r.cpuCountGte != nil {
		localVarQueryParams.Add("cpuCount__gte", parameterToString(*r.cpuCountGte, ""))
	}
	if r.uuids != nil {
		localVarQueryParams.Add("uuids", parameterToString(*r.uuids, "csv"))
	}
	if r.serialNumberContains != nil {
		localVarQueryParams.Add("serialNumber__contains", parameterToString(*r.serialNumberContains, "csv"))
	}
	if r.registeredAtBetween != nil {
		localVarQueryParams.Add("registeredAt__between", parameterToString(*r.registeredAtBetween, ""))
	}
	if r.scanStatus != nil {
		localVarQueryParams.Add("scanStatus", parameterToString(*r.scanStatus, ""))
	}
	if r.externalIdContains != nil {
		localVarQueryParams.Add("externalId__contains", parameterToString(*r.externalIdContains, "csv"))
	}
	if r.totalMemoryLte != nil {
		localVarQueryParams.Add("totalMemory__lte", parameterToString(*r.totalMemoryLte, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.locationIds != nil {
		localVarQueryParams.Add("locationIds", parameterToString(*r.locationIds, "csv"))
	}
	if r.cloudNetworkContains != nil {
		localVarQueryParams.Add("cloudNetwork__contains", parameterToString(*r.cloudNetworkContains, "csv"))
	}
	if r.azureResourceGroupContains != nil {
		localVarQueryParams.Add("azureResourceGroup__contains", parameterToString(*r.azureResourceGroupContains, "csv"))
	}
	if r.coreCountBetween != nil {
		localVarQueryParams.Add("coreCount__between", parameterToString(*r.coreCountBetween, ""))
	}
	if r.isUninstalled != nil {
		localVarQueryParams.Add("isUninstalled", parameterToString(*r.isUninstalled, "csv"))
	}
	if r.filterId != nil {
		localVarQueryParams.Add("filterId", parameterToString(*r.filterId, ""))
	}
	if r.cpuIdContains != nil {
		localVarQueryParams.Add("cpuId__contains", parameterToString(*r.cpuIdContains, "csv"))
	}
	if r.k8sTypeContains != nil {
		localVarQueryParams.Add("k8sType__contains", parameterToString(*r.k8sTypeContains, "csv"))
	}
	if r.cloudProviderNin != nil {
		localVarQueryParams.Add("cloudProviderNin", parameterToString(*r.cloudProviderNin, "csv"))
	}
	if r.mitigationMode != nil {
		localVarQueryParams.Add("mitigationMode", parameterToString(*r.mitigationMode, ""))
	}
	if r.cloudAccountContains != nil {
		localVarQueryParams.Add("cloudAccount__contains", parameterToString(*r.cloudAccountContains, "csv"))
	}
	if r.adComputerMemberContains != nil {
		localVarQueryParams.Add("adComputerMember__contains", parameterToString(*r.adComputerMemberContains, "csv"))
	}
	if r.consoleMigrationStatuses != nil {
		localVarQueryParams.Add("consoleMigrationStatuses", parameterToString(*r.consoleMigrationStatuses, "csv"))
	}
	if r.lastActiveDateGt != nil {
		localVarQueryParams.Add("lastActiveDate__gt", parameterToString(*r.lastActiveDateGt, ""))
	}
	if r.osArch != nil {
		localVarQueryParams.Add("osArch", parameterToString(*r.osArch, ""))
	}
	if r.agentContentUpdateIdContains != nil {
		localVarQueryParams.Add("agentContentUpdateId__contains", parameterToString(*r.agentContentUpdateIdContains, "csv"))
	}
	if r.registeredAtGte != nil {
		localVarQueryParams.Add("registeredAt__gte", parameterToString(*r.registeredAtGte, ""))
	}
	if r.coreCountGt != nil {
		localVarQueryParams.Add("coreCount__gt", parameterToString(*r.coreCountGt, ""))
	}
	if r.cpuCountLte != nil {
		localVarQueryParams.Add("cpuCount__lte", parameterToString(*r.cpuCountLte, ""))
	}
	if r.agentPodNameContains != nil {
		localVarQueryParams.Add("agentPodName__contains", parameterToString(*r.agentPodNameContains, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.decommissionedAtBetween != nil {
		localVarQueryParams.Add("decommissionedAt__between", parameterToString(*r.decommissionedAtBetween, ""))
	}
	if r.threatCreatedAtLt != nil {
		localVarQueryParams.Add("threatCreatedAt__lt", parameterToString(*r.threatCreatedAtLt, ""))
	}
	if r.coreCountGte != nil {
		localVarQueryParams.Add("coreCount__gte", parameterToString(*r.coreCountGte, ""))
	}
	if r.clusterNameContains != nil {
		localVarQueryParams.Add("clusterName__contains", parameterToString(*r.clusterNameContains, "csv"))
	}
	if r.cpuCountGt != nil {
		localVarQueryParams.Add("cpuCount__gt", parameterToString(*r.cpuCountGt, ""))
	}
	if r.adQueryContains != nil {
		localVarQueryParams.Add("adQuery__contains", parameterToString(*r.adQueryContains, "csv"))
	}
	if r.rangerVersions != nil {
		localVarQueryParams.Add("rangerVersions", parameterToString(*r.rangerVersions, "csv"))
	}
	if r.userActionsNeededNin != nil {
		localVarQueryParams.Add("userActionsNeededNin", parameterToString(*r.userActionsNeededNin, "csv"))
	}
	if r.threatCreatedAtGt != nil {
		localVarQueryParams.Add("threatCreatedAt__gt", parameterToString(*r.threatCreatedAtGt, ""))
	}
	if r.cloudInstanceSizeContains != nil {
		localVarQueryParams.Add("cloudInstanceSize__contains", parameterToString(*r.cloudInstanceSizeContains, "csv"))
	}
	if r.adQuery != nil {
		localVarQueryParams.Add("adQuery", parameterToString(*r.adQuery, ""))
	}
	if r.externalIpContains != nil {
		localVarQueryParams.Add("externalIp__contains", parameterToString(*r.externalIpContains, "csv"))
	}
	if r.locationEnabled != nil {
		localVarQueryParams.Add("locationEnabled", parameterToString(*r.locationEnabled, "csv"))
	}
	if r.totalMemoryGt != nil {
		localVarQueryParams.Add("totalMemory__gt", parameterToString(*r.totalMemoryGt, ""))
	}
	if r.gatewayIp != nil {
		localVarQueryParams.Add("gatewayIp", parameterToString(*r.gatewayIp, ""))
	}
	if r.registeredAtLt != nil {
		localVarQueryParams.Add("registeredAt__lt", parameterToString(*r.registeredAtLt, ""))
	}
	if r.agentVersions != nil {
		localVarQueryParams.Add("agentVersions", parameterToString(*r.agentVersions, "csv"))
	}
	if r.installerTypes != nil {
		localVarQueryParams.Add("installerTypes", parameterToString(*r.installerTypes, "csv"))
	}
	if r.coreCountLte != nil {
		localVarQueryParams.Add("coreCount__lte", parameterToString(*r.coreCountLte, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.totalMemoryBetween != nil {
		localVarQueryParams.Add("totalMemory__between", parameterToString(*r.totalMemoryBetween, ""))
	}
	if r.lastActiveDateGte != nil {
		localVarQueryParams.Add("lastActiveDate__gte", parameterToString(*r.lastActiveDateGte, ""))
	}
	if r.computerNameContains != nil {
		localVarQueryParams.Add("computerName__contains", parameterToString(*r.computerNameContains, "csv"))
	}
	if r.locationIdsNin != nil {
		localVarQueryParams.Add("locationIdsNin", parameterToString(*r.locationIdsNin, "csv"))
	}
	if r.threatCreatedAtLte != nil {
		localVarQueryParams.Add("threatCreatedAt__lte", parameterToString(*r.threatCreatedAtLte, ""))
	}
	if r.hasTags != nil {
		localVarQueryParams.Add("hasTags", parameterToString(*r.hasTags, ""))
	}
	if r.updatedAtGte != nil {
		localVarQueryParams.Add("updatedAt__gte", parameterToString(*r.updatedAtGte, ""))
	}
	if r.threatResolved != nil {
		localVarQueryParams.Add("threatResolved", parameterToString(*r.threatResolved, ""))
	}
	if r.decommissionedAtGt != nil {
		localVarQueryParams.Add("decommissionedAt__gt", parameterToString(*r.decommissionedAtGt, ""))
	}
	if r.threatHidden != nil {
		localVarQueryParams.Add("threatHidden", parameterToString(*r.threatHidden, ""))
	}
	if r.infected != nil {
		localVarQueryParams.Add("infected", parameterToString(*r.infected, ""))
	}
	if r.uuidContains != nil {
		localVarQueryParams.Add("uuid__contains", parameterToString(*r.uuidContains, "csv"))
	}
	if r.networkStatusesNin != nil {
		localVarQueryParams.Add("networkStatusesNin", parameterToString(*r.networkStatusesNin, "csv"))
	}
	if r.cloudImageContains != nil {
		localVarQueryParams.Add("cloudImage__contains", parameterToString(*r.cloudImageContains, "csv"))
	}
	if r.siteIds != nil {
		localVarQueryParams.Add("siteIds", parameterToString(*r.siteIds, "csv"))
	}
	if r.rangerStatus != nil {
		localVarQueryParams.Add("rangerStatus", parameterToString(*r.rangerStatus, ""))
	}
	if r.domainsNin != nil {
		localVarQueryParams.Add("domainsNin", parameterToString(*r.domainsNin, "csv"))
	}
	if r.threatCreatedAtGte != nil {
		localVarQueryParams.Add("threatCreatedAt__gte", parameterToString(*r.threatCreatedAtGte, ""))
	}
	if r.csvFilterId != nil {
		localVarQueryParams.Add("csvFilterId", parameterToString(*r.csvFilterId, ""))
	}
	if r.adUserNameContains != nil {
		localVarQueryParams.Add("adUserName__contains", parameterToString(*r.adUserNameContains, "csv"))
	}
	if r.appsVulnerabilityStatusesNin != nil {
		localVarQueryParams.Add("appsVulnerabilityStatusesNin", parameterToString(*r.appsVulnerabilityStatusesNin, "csv"))
	}
	if r.uuid != nil {
		localVarQueryParams.Add("uuid", parameterToString(*r.uuid, ""))
	}
	if r.coreCountLt != nil {
		localVarQueryParams.Add("coreCount__lt", parameterToString(*r.coreCountLt, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("skip", parameterToString(*r.skip, ""))
	}
	if r.mitigationModeSuspicious != nil {
		localVarQueryParams.Add("mitigationModeSuspicious", parameterToString(*r.mitigationModeSuspicious, ""))
	}
	if r.rangerStatusesNin != nil {
		localVarQueryParams.Add("rangerStatusesNin", parameterToString(*r.rangerStatusesNin, "csv"))
	}
	if r.createdAtGt != nil {
		localVarQueryParams.Add("createdAt__gt", parameterToString(*r.createdAtGt, ""))
	}
	if r.rangerVersionsNin != nil {
		localVarQueryParams.Add("rangerVersionsNin", parameterToString(*r.rangerVersionsNin, "csv"))
	}
	if r.filteredGroupIds != nil {
		localVarQueryParams.Add("filteredGroupIds", parameterToString(*r.filteredGroupIds, "csv"))
	}
	if r.decommissionedAtLte != nil {
		localVarQueryParams.Add("decommissionedAt__lte", parameterToString(*r.decommissionedAtLte, ""))
	}
	if r.operationalStates != nil {
		localVarQueryParams.Add("operationalStates", parameterToString(*r.operationalStates, "csv"))
	}
	if r.osVersionContains != nil {
		localVarQueryParams.Add("osVersion__contains", parameterToString(*r.osVersionContains, "csv"))
	}
	if r.updatedAtLte != nil {
		localVarQueryParams.Add("updatedAt__lte", parameterToString(*r.updatedAtLte, ""))
	}
	if r.updatedAtLt != nil {
		localVarQueryParams.Add("updatedAt__lt", parameterToString(*r.updatedAtLt, ""))
	}
	if r.k8sNodeLabelsContains != nil {
		localVarQueryParams.Add("k8sNodeLabels__contains", parameterToString(*r.k8sNodeLabelsContains, "csv"))
	}
	if r.adUserMemberContains != nil {
		localVarQueryParams.Add("adUserMember__contains", parameterToString(*r.adUserMemberContains, "csv"))
	}
	if r.cloudLocationContains != nil {
		localVarQueryParams.Add("cloudLocation__contains", parameterToString(*r.cloudLocationContains, "csv"))
	}
	if r.networkStatuses != nil {
		localVarQueryParams.Add("networkStatuses", parameterToString(*r.networkStatuses, "csv"))
	}
	if r.remoteProfilingStates != nil {
		localVarQueryParams.Add("remoteProfilingStates", parameterToString(*r.remoteProfilingStates, "csv"))
	}
	if r.networkInterfacePhysicalContains != nil {
		localVarQueryParams.Add("networkInterfacePhysical__contains", parameterToString(*r.networkInterfacePhysicalContains, "csv"))
	}
	if r.agentNamespaceContains != nil {
		localVarQueryParams.Add("agentNamespace__contains", parameterToString(*r.agentNamespaceContains, "csv"))
	}
	if r.rangerStatuses != nil {
		localVarQueryParams.Add("rangerStatuses", parameterToString(*r.rangerStatuses, "csv"))
	}
	if r.skipCount != nil {
		localVarQueryParams.Add("skipCount", parameterToString(*r.skipCount, ""))
	}
	if r.activeThreatsGt != nil {
		localVarQueryParams.Add("activeThreats__gt", parameterToString(*r.activeThreatsGt, ""))
	}
	if r.lastActiveDateLt != nil {
		localVarQueryParams.Add("lastActiveDate__lt", parameterToString(*r.lastActiveDateLt, ""))
	}
	if r.cloudInstanceIdContains != nil {
		localVarQueryParams.Add("cloudInstanceId__contains", parameterToString(*r.cloudInstanceIdContains, "csv"))
	}
	if r.createdAtLt != nil {
		localVarQueryParams.Add("createdAt__lt", parameterToString(*r.createdAtLt, ""))
	}
	if r.cpuCountBetween != nil {
		localVarQueryParams.Add("cpuCount__between", parameterToString(*r.cpuCountBetween, ""))
	}
	if r.gcpServiceAccountContains != nil {
		localVarQueryParams.Add("gcpServiceAccount__contains", parameterToString(*r.gcpServiceAccountContains, "csv"))
	}
	if r.threatCreatedAtBetween != nil {
		localVarQueryParams.Add("threatCreatedAt__between", parameterToString(*r.threatCreatedAtBetween, ""))
	}
	if r.osTypes != nil {
		localVarQueryParams.Add("osTypes", parameterToString(*r.osTypes, "csv"))
	}
	if r.cpuCountLt != nil {
		localVarQueryParams.Add("cpuCount__lt", parameterToString(*r.cpuCountLt, ""))
	}
	if r.groupIds != nil {
		localVarQueryParams.Add("groupIds", parameterToString(*r.groupIds, "csv"))
	}
	if r.computerNameLike != nil {
		localVarQueryParams.Add("computerName__like", parameterToString(*r.computerNameLike, ""))
	}
	if r.tagsData != nil {
		localVarQueryParams.Add("tagsData", parameterToString(*r.tagsData, ""))
	}
	if r.createdAtBetween != nil {
		localVarQueryParams.Add("createdAt__between", parameterToString(*r.createdAtBetween, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v NoDataSchema400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v NoDataSchema401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
